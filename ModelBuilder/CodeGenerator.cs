using System.Text;

namespace ModelBuilder;

public class CodeGenerator
{
	public static string Execute(LocalSettings settings, EntityDefinition entity)
	{
		StringBuilder sb = new();
		sb.AppendLine(
			$"""
			// <auto-generated>
			// This is a generated file. Manual changes may be overwritten.
			// </auto-generated>

			#nullable enable

			using Microsoft.EntityFrameworkCore;
			using Microsoft.EntityFrameworkCore.Metadata.Builders;
			{UsingBaseClassNamespace(settings)}
				
			namespace {settings.DefaultNamespace};
			""");

		sb.AppendLine($"public class {entity.Name}\r\n{{");

		AddProperties(sb, entity);
		AddNavigationProperties(sb, entity);

		sb.AppendLine("}");

		return sb.ToString();
	}

	private static void AddNavigationProperties(StringBuilder sb, EntityDefinition entity)
	{
		throw new NotImplementedException();
	}

	private static void AddProperties(StringBuilder sb, EntityDefinition entity)
	{
		throw new NotImplementedException();
	}

	public static void WriteFiles(LocalSettings settings, EntityDefinition[] entities, string outputFolder)
	{
		foreach (var entity in entities)
		{
			var baseFile = $"{entity.Name}.cs";
			var outputFile = Path.Combine(outputFolder, baseFile);

			if (File.Exists(outputFile))
			{
				Console.WriteLine($"'{baseFile}' already exists");
				continue;
			}
			
			var code = Execute(settings, entity);
			File.WriteAllText(outputFile, code);
		}
	}

	private static string UsingBaseClassNamespace(LocalSettings settings) =>
		string.IsNullOrWhiteSpace(settings.BaseClassNamespace) ? string.Empty : $"using {settings.BaseClassNamespace};";
}
