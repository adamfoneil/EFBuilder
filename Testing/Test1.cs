using EFBuilder;

namespace Testing;

[TestClass]
public sealed class Test1
{
	[TestMethod]
	public void TestCase01Generation()
	{
		// Arrange
		var service = new EFBuilderService();
		var projectRoot = Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory(), "..", "..", ".."));
		var inputPath = Path.Combine(projectRoot, "Resources", "Case01", "input.txt");
		var input = File.ReadAllText(inputPath);
		
		// Act
		var generatedFiles = service.GenerateEntitiesFromInput(input, "Testing.Resources.Case01");
		
		// Assert
		Assert.AreEqual(3, generatedFiles.Count, "Should generate 3 entity files");
		Assert.IsTrue(generatedFiles.ContainsKey("Customer.cs"), "Should generate Customer.cs");
		Assert.IsTrue(generatedFiles.ContainsKey("Status.cs"), "Should generate Status.cs");
		Assert.IsTrue(generatedFiles.ContainsKey("Order.cs"), "Should generate Order.cs");
		
		// Verify Customer class content
		var customerCode = generatedFiles["Customer.cs"];
		Assert.IsTrue(customerCode.Contains("public class Customer : BaseTable"), "Customer should inherit from BaseTable");
		Assert.IsTrue(customerCode.Contains("public string FirstName { get; set; } = default!;"), "Customer should have FirstName property");
		Assert.IsTrue(customerCode.Contains("public string? Email { get; set; };"), "Customer should have nullable Email property");
		Assert.IsTrue(customerCode.Contains("public bool IsActive { get; set; } = true;"), "Customer should have IsActive with default value");
		Assert.IsTrue(customerCode.Contains("public ICollection<Order> Orders { get; set; } = [];"), "Customer should have Orders navigation property");
		
		// Verify Status class content
		var statusCode = generatedFiles["Status.cs"];
		Assert.IsTrue(statusCode.Contains("public class Status : BaseTable"), "Status should inherit from BaseTable");
		Assert.IsTrue(statusCode.Contains("public string Name { get; set; } = default!;"), "Status should have Name property");
		Assert.IsTrue(statusCode.Contains("public string? Description { get; set; };"), "Status should have nullable Description property");
		
		// Verify Order class content
		var orderCode = generatedFiles["Order.cs"];
		Assert.IsTrue(orderCode.Contains("public class Order : BaseTable"), "Order should inherit from BaseTable");
		Assert.IsTrue(orderCode.Contains("public int CustomerId { get; set; };"), "Order should have CustomerId foreign key");
		Assert.IsTrue(orderCode.Contains("public Customer? Customer { get; set; }"), "Order should have Customer navigation property");
		Assert.IsTrue(orderCode.Contains("public Status? Status { get; set; }"), "Order should have Status navigation property");
		Assert.IsTrue(orderCode.Contains("public DateTime? StatusDate { get; set; };"), "Order should have nullable StatusDate");
	}
	
	[TestMethod]
	public void TestGeneratedCommentHeader()
	{
		// Arrange
		var service = new EFBuilderService();
		var input = "TestEntity : BaseTable\nName string(50)";
		
		// Act
		var generatedFiles = service.GenerateEntitiesFromInput(input, "Test");
		
		// Assert
		Assert.AreEqual(1, generatedFiles.Count, "Should generate 1 entity file");
		Assert.IsTrue(generatedFiles.ContainsKey("TestEntity.cs"), "Should generate TestEntity.cs");
		
		var entityCode = generatedFiles["TestEntity.cs"];
		Assert.IsTrue(entityCode.StartsWith("// <auto-generated>"), "Generated file should start with auto-generated comment");
		Assert.IsTrue(entityCode.Contains("// This is a generated file. Manual changes may be overwritten."), "Generated file should contain warning comment");
		Assert.IsTrue(entityCode.Contains("// </auto-generated>"), "Generated file should end auto-generated comment block");
		Assert.IsTrue(entityCode.Contains("#nullable enable"), "Generated file should contain nullable enable directive");
	}

	[TestMethod]
	public void TestUniqueIndexGeneration()
	{
		// Arrange
		var service = new EFBuilderService();
		var input = "User : BaseTable\n#Email string(50)\n#Username string(30)\nFullName string(100)";
		
		// Act
		var generatedFiles = service.GenerateEntitiesFromInput(input, "Test");
		
		// Assert
		Assert.AreEqual(1, generatedFiles.Count, "Should generate 1 entity file");
		Assert.IsTrue(generatedFiles.ContainsKey("User.cs"), "Should generate User.cs");
		
		var entityCode = generatedFiles["User.cs"];
		Assert.IsTrue(entityCode.Contains("builder.HasIndex(u => u.Email, u => u.Username).IsUnique();"), "Should generate unique index for Email and Username");
		Assert.IsTrue(entityCode.Contains("public string Email { get; set; } = default!;"), "Email property should not have semicolon issue");
		Assert.IsTrue(entityCode.Contains("public string Username { get; set; } = default!;"), "Username property should not have semicolon issue");
	}

	[TestMethod]
	public void TestPropertySemicolonFix()
	{
		// Arrange
		var service = new EFBuilderService();
		var input = "Product : BaseTable\nName string(50)\nPrice decimal?\nIsActive bool = true";
		
		// Act
		var generatedFiles = service.GenerateEntitiesFromInput(input, "Test");
		
		// Assert
		var entityCode = generatedFiles["Product.cs"];
		Assert.IsTrue(entityCode.Contains("public string Name { get; set; } = default!;"), "Required string should have proper syntax");
		Assert.IsTrue(entityCode.Contains("public decimal? Price { get; set; };"), "Nullable property should have proper syntax");
		Assert.IsTrue(entityCode.Contains("public bool IsActive { get; set; } = true;"), "Property with default should have proper syntax");
		
		// Ensure no double semicolons
		Assert.IsFalse(entityCode.Contains("{ get; set; };;"), "Should not have double semicolons");
	}
}
